{"ast":null,"code":"var _jsxFileName = \"/Users/djs/Downloads/VisualizingTwitchCommunities-AutoAtlasGeneration/web-react/src/components/GraphView.js\";\nimport React from 'react';\nimport Sigma from \"sigma\";\nimport Graph from \"graphology\";\nimport { parse } from \"graphology-gexf/browser\";\nimport { UndirectedGraph } from 'graphology';\nimport RawGraph from './webdata.gexf';\nimport { SigmaContainer } from \"@react-sigma/core\";\nimport \"@react-sigma/core/lib/react-sigma.min.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass GraphView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.LoadGexfToSigma = this.LoadGexfToSigma.bind(this);\n  }\n  LoadGexfToSigma(RawGraph) {\n    const sigmaGraph = new UndirectedGraph();\n\n    // Load external GEXF file:\n    fetch(RawGraph).then(res => res.text()).then(gexf => {\n      // Parse GEXF string:\n      const graphObj = parse(Graph, gexf);\n      graphObj.forEachNode(function (key, attrs) {\n        sigmaGraph.addNode(key, {\n          x: attrs.x,\n          y: attrs.y,\n          label: attrs.label,\n          size: attrs.size / 10,\n          color: attrs.color\n        });\n      });\n      graphObj.forEachUndirectedEdge(function (key, attrs, source, target, sourceAttrs) {\n        // console.log(sourceAttrs.color)\n        const colorVals = sourceAttrs.color.slice(4, -1);\n        const newCol = `rgba(${colorVals},0.1)`;\n        if (source == 'speedgaming' || target == 'speedgaming') {\n          console.log(newCol);\n        }\n        sigmaGraph.addEdgeWithKey(key, source, target, {\n          weight: attrs.weight / 10,\n          size: 0.1,\n          color: newCol,\n          width: 1\n        });\n      });\n    });\n    return sigmaGraph;\n  }\n  componentDidMount() {\n    const graph = this.LoadGexfToSigma(RawGraph);\n    this.setState({\n      graph: graph\n    });\n    this.setState({\n      sigmaSettings: {\n        // maxNodeSize: maxNodeSize,\n        // maxEdgeSize: maxEdgeSize,\n        autoRescale: false,\n        minEdgeSize: 0.1,\n        maxEdgeSize: 1,\n        drawEdges: false\n      }\n    });\n\n    // Retrieve some useful DOM elements:\n    // const container = document.getElementById(\"sigma-container\") \n    // const zoomInBtn = document.getElementById(\"zoom-in\") \n    // const zoomOutBtn = document.getElementById(\"zoom-out\") \n    // const zoomResetBtn = document.getElementById(\"zoom-reset\") \n    // const labelsThresholdRange = document.getElementById(\"labels-threshold\") \n\n    // // Instanciate sigma:\n    // const renderer = new Sigma(graph, container, {\n    //   minCameraRatio: 0.1,\n    //   maxCameraRatio: 10,\n    // });\n    // const camera = renderer.getCamera();\n\n    // Bind zoom manipulation buttons\n    // zoomInBtn.addEventListener(\"click\", () => {\n    //   camera.animatedZoom({ duration: 600 });\n    // });\n    // zoomOutBtn.addEventListener(\"click\", () => {\n    //   camera.animatedUnzoom({ duration: 600 });\n    // });\n    // zoomResetBtn.addEventListener(\"click\", () => {\n    //   camera.animatedReset({ duration: 600 });\n    // });\n\n    // Bind labels threshold to range input\n    // labelsThresholdRange.addEventListener(\"input\", () => {\n    //   renderer.setSetting(\"labelRenderedSizeThreshold\", +labelsThresholdRange.value);\n    // });\n\n    // Set proper range initial value:\n    // labelsThresholdRange.value = renderer.getSetting(\"labelRenderedSizeThreshold\") + \"\";\n  }\n\n  componentWillUnmount() {}\n  render() {\n    return /*#__PURE__*/_jsxDEV(SigmaContainer, {\n      id: \"SigmaCanvas\",\n      style: {\n        height: \"100vh\",\n        width: '100vw'\n      },\n      graph: this.state.graph,\n      renderer: \"canvas\",\n      settings: {\n        drawEdges: false\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }, this);\n  }\n}\nexport default GraphView;","map":{"version":3,"names":["React","Sigma","Graph","parse","UndirectedGraph","RawGraph","SigmaContainer","GraphView","Component","constructor","props","state","LoadGexfToSigma","bind","sigmaGraph","fetch","then","res","text","gexf","graphObj","forEachNode","key","attrs","addNode","x","y","label","size","color","forEachUndirectedEdge","source","target","sourceAttrs","colorVals","slice","newCol","console","log","addEdgeWithKey","weight","width","componentDidMount","graph","setState","sigmaSettings","autoRescale","minEdgeSize","maxEdgeSize","drawEdges","componentWillUnmount","render","height"],"sources":["/Users/djs/Downloads/VisualizingTwitchCommunities-AutoAtlasGeneration/web-react/src/components/GraphView.js"],"sourcesContent":["import React from 'react';\nimport Sigma from \"sigma\";\nimport Graph from \"graphology\";\nimport { parse } from \"graphology-gexf/browser\";\nimport { UndirectedGraph } from 'graphology';\nimport RawGraph from './webdata.gexf'\nimport { SigmaContainer } from \"@react-sigma/core\";\nimport \"@react-sigma/core/lib/react-sigma.min.css\";\n\n\nclass GraphView extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.LoadGexfToSigma = this.LoadGexfToSigma.bind(this)\n      }\n    \n    LoadGexfToSigma(RawGraph)\n    {\n        const sigmaGraph = new UndirectedGraph();\n\n        // Load external GEXF file:\n        fetch(RawGraph)\n        .then((res) => res.text())\n        .then((gexf) => {\n          // Parse GEXF string:\n          const graphObj = parse(Graph, gexf);    \n          \n          graphObj.forEachNode(function(key, attrs){\n\n            sigmaGraph.addNode(key, \n            { \n              x: attrs.x, \n              y: attrs.y, \n              label: attrs.label, \n              size: attrs.size / 10,\n              color: attrs.color\n            });\n\n          });\n\n          graphObj.forEachUndirectedEdge(function(key, attrs, source, target, sourceAttrs){\n            // console.log(sourceAttrs.color)\n            const colorVals = sourceAttrs.color.slice(4, -1)\n            \n            const newCol = `rgba(${colorVals},0.1)`\n            if(source == 'speedgaming' || target == 'speedgaming')\n            {\n              console.log(newCol)\n            }\n\n            sigmaGraph.addEdgeWithKey(key, source, target,\n            { \n              weight: attrs.weight / 10, \n              size: 0.1,\n              color: newCol,\n              width: 1,\n            });\n          });\n        })\n\n      return sigmaGraph;\n    }\n\n    componentDidMount() {\n\n      const graph = this.LoadGexfToSigma(RawGraph)\n\n      this.setState({graph: graph})\n\n      this.setState({sigmaSettings: {\n          // maxNodeSize: maxNodeSize,\n          // maxEdgeSize: maxEdgeSize,\n          autoRescale: false,\n          minEdgeSize: 0.1,\n          maxEdgeSize: 1,\n          drawEdges: false,\n      }})\n\n        // Retrieve some useful DOM elements:\n        // const container = document.getElementById(\"sigma-container\") \n        // const zoomInBtn = document.getElementById(\"zoom-in\") \n        // const zoomOutBtn = document.getElementById(\"zoom-out\") \n        // const zoomResetBtn = document.getElementById(\"zoom-reset\") \n        // const labelsThresholdRange = document.getElementById(\"labels-threshold\") \n\n        // // Instanciate sigma:\n        // const renderer = new Sigma(graph, container, {\n        //   minCameraRatio: 0.1,\n        //   maxCameraRatio: 10,\n        // });\n        // const camera = renderer.getCamera();\n\n        // Bind zoom manipulation buttons\n        // zoomInBtn.addEventListener(\"click\", () => {\n        //   camera.animatedZoom({ duration: 600 });\n        // });\n        // zoomOutBtn.addEventListener(\"click\", () => {\n        //   camera.animatedUnzoom({ duration: 600 });\n        // });\n        // zoomResetBtn.addEventListener(\"click\", () => {\n        //   camera.animatedReset({ duration: 600 });\n        // });\n\n        // Bind labels threshold to range input\n        // labelsThresholdRange.addEventListener(\"input\", () => {\n        //   renderer.setSetting(\"labelRenderedSizeThreshold\", +labelsThresholdRange.value);\n        // });\n\n        // Set proper range initial value:\n        // labelsThresholdRange.value = renderer.getSetting(\"labelRenderedSizeThreshold\") + \"\";\n    }\n  \n    componentWillUnmount() {\n    }\n\n    render() {\n      return (\n          <SigmaContainer id='SigmaCanvas' style={{ height: \"100vh\", width: '100vw'}} graph={this.state.graph} renderer='canvas' settings={{ drawEdges: false    }} />\n      )\n    }}\nexport default GraphView;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}